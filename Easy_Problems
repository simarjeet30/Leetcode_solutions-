1. Two Sum

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector <int>ans;
        for (int i =0;i<nums.size();i++)
        {
            for (int j=i+1;j<nums.size();j++)
            {
                if (nums[i]+nums[j]==target)
                {
                    ans.push_back(i);
                    ans.push_back(j);
                    //here return becoz if 2 elements found we need to stop traversing
                    return (ans);
                }
            }
        }return (ans);
    }
    
};


9. Palindrome Number

class Solution {
public:
    bool isPalindrome(int x) 
    {
       long int p=x;
       long int y=0;
       while(x)
       {
           y *= 10;
           y += x % 10;
           x /= 10;
       }
       //for rejecting -121 like cases
       if (p!=y||p<0)
       {
           return false;
       }
       else{
           return true;
       }
        
    }
    
    
};
///////////////////////alternate ,less time complexity////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    bool isPalindrome(int x) {
        long int t=x;
        long int p=0;
        if (x<0)
            return false;
        
        if (x/10==0)
            return true;
        while (x!=0)
        {
            p=p*10;
            p+=x%10;
            x/=10;
        }
        if (p!=t)
            return false;
        return true;
    }
};


13. Roman to Integer

class Solution {
public:
    int romanToInt(string s) {
        int ans=0,k;
        for (int i=0;i<s.length();i++)
        {
            if (s[i]=='I')
            {
                if (s[i+1]=='V')
                {
                    ans=ans+4;
                    i=i+1;    
                }
                else if (s[i+1]=='X')
                {
                    ans=ans+9;
                    i=i+1;   
                }
                else
                {
                    ans=ans+1;    
                }
            }
            else if (s[i]=='X')
            {
                if (s[i+1]=='L')
                {
                    ans=ans+40;
                    i=i+1;    
                }
                else if (s[i+1]=='C')
                {
                    ans=ans+90;
                    i=i+1; 
                }
                else
                {
                    ans=ans+10;
                }
            }
            else if (s[i]=='C')
            {
                if (s[i+1]=='D')
                {
                    ans=ans+400;
                    i=i+1;
                }
                else if (s[i+1]=='M')
                {
                    ans=ans+900;
                    i=i+1;
                }
                else
                {
                    ans=ans+100;   
                }
            }
            
            else if (s[i]=='V')
            {
                ans=ans+5;    
            }
            else if (s[i]=='L')
            {
                ans=ans+50;   
            }
            else if (s[i]=='D')
            {
                ans=ans+500;    
            }
            else if (s[i]=='M')
            {
                ans=ans+1000;
            }
        
        }
      return ans;  
    }
};
///////////////////////////////////////////IMP ALTERNATIVE/////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    int table (char c)
    {
        switch (c)
        {
                case'I':return 1;
                case'V':return 5;
                case'X':return 10;
                case'L':return 50;
                case'C':return 100;
                case'D':return 500;
                case'M':return 1000;
                default:return 0;

        }
    }
    int romanToInt(string s) {
        int size=s.size();
        int sum=0;
        for (int i=0;i<size;i++)
        {
            if (i+1<size&&table(s[i])<table(s[i+1]))
            {
                sum-=table(s[i]);
            }
            else
            {
                sum+=table(s[i]);                          
            }
        }
        return sum;
    }
};

14. Longest Common Prefix
///////////////////////////////////////////////////vimp///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        int n=strs.size();
        if (n==0)
        {
            return "";
        }
        if (n==1)
        {
            return strs[0];
        }
        sort (strs.begin(), strs.begin()+n);
        int en=min(strs[0].size(),strs[n-1].size());
        string first = strs[0], last = strs[n - 1];
        int i = 0;
        while (i < en && first[i] == last[i])
        i++;
 ////////////////////////////imp step.//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        string s = first.substr(0, i);
        return s;  
    }
};

20. Valid Parentheses
///////////////////////////////////////////////////////////////imp/////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
bool isValid(string s) {
        stack<char> st;
        if (s.length()%2!=0)
        return false;
        for (int i=0;i<s.length();i++)
        {
            if(s[i] == '{' or s[i] == '(' or s[i] == '[')
            {
                st.push(s[i]);
                
            }
            else if (st.empty())
            {
                return false;
            }
            else if ((s[i] == '}' and st.top() == '{') or (s[i] == ']' and st.top() == '[') or (s[i] == ')' and st.top() == '('))
            {
                st.pop();
            }
            else
            {
                return false;
            }
        }
        return (st.empty());
    }
};

21. Merge Two Sorted Lists

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 ////////////////////////////////////////////////////////////imp//////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
   ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) 
    {
        ListNode *Head;
        if (!l1)
        return l2;
        if (!l2)
        return l1;

    if (l1->val <= l2->val) {
        l1->next = mergeTwoLists(l1->next, l2);
        return l1;
    }
    else {
        l2->next = mergeTwoLists(l1, l2->next);
        return l2;
    }


    }
};

26. Remove Duplicates from Sorted Array

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
       int j = 0;
        for(int i =0;i<nums.size()-1;i++){
            if(nums[i] != nums[i+1]){
                nums[j++] = nums[i];
            }
        }
        nums[j++]=nums[nums.size()-1];
        
        return j++;
    }
};

27. Remove Element

class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        if(nums.size() == 0){
            return 0;
         }
        vector<int> :: iterator it;
        it = nums.begin();
        for(int i =0;i<nums.size();i++){
            if(nums[i] == val){
                //yhaa iterator ki jgah agar int deti input me to nhi chalta 
                nums.erase(it);
                   it--;
                   i--;
                   }
            it++;
            }
            return nums.size();
    }
};

28. Implement strStr()

class Solution {
public:
    int strStr(string haystack, string needle) {
        int result=0;
        for(int i=0;i<haystack.size();i++)
        {
            if (haystack[i]==needle[0])
            {
                result=i;
                int ind=i++;
                int j;
                for (j=1;j<needle.size();j++)
                {
                    if (haystack[i]!=needle[j])
                        {
                            result=0;
                            break;
                        }
                        i++;
                    
                }
                if (j==needle.size())
                    return result;
                
                else
                    i=ind;
                
            }
        
    }
    return -1;
        
    }
};

///////////////////////////////////////////////////////less time complexity /////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    int strStr(string haystack, string needle) {
        if (needle.empty() || needle.size() > haystack.size())
            return -1;
        
        int j = 0;
        
        for (int i = 0; i < haystack.size(); ++i)
        {
            if (needle[j] == haystack[i])
            {
                ++j;
                if(j == needle.size())
                    return i - needle.length() + 1;
             }
            else 
            {
                i -= j;
                j = 0;
            }
        }
        return -1;
    }
};

69. Sqrt(x)
///////////////////////////////////////OWN///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    int ans;
    int mySqrt(int x) {
        if (x==1)
            return 1;
        for (long int i=1;i<=x/2;i++)
        {
            if (i*i<=x)
            {ans=i;}
            else 
                return ans;
        }
        return ans;
        
    }
};
///////////////////////////////////////////BINARY SEARCH/////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
int mySqrt(int x) {
int s = 0;
int e = x;

int ans;
while(s<=e){

    
long long int m = (s+e)/2;
        if(m*m == x){
            return m;
        }
        else if(m*m > x){//if square greater
            e = m-1;
        }
        else if(m*m < x){//if square lesser
            ans = m;
            s = m+1;
        }
        
     
    }
    return ans;
    
}
};


70. Climbing Stairs///////////////////////////I M P LOGIC //////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    int ans[50];
    int climbStairs(int n) {
        
        if (n==0)
            return 0;
        if (n==1)
            return 1;
        ans[1]=1;
        ans[2]=2;
        for (int i=3;i<=n;i++)
            {
                ans[i]=ans[i-1]+ans[i-2];
            }
        
        return ans[n];
        
        
        
    }
};

88. Merge Sorted Array...................................I M P ........................................................................................................

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int j=0;
        for (int i=m;i<m+n;i++)
        {
            nums1[i]=nums2[j];
            j++;
        }
        sort (nums1.begin(),nums1.end());
       
        
    }
};

94. Binary Tree Inorder Traversal

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> v;
    vector<int> inorderTraversal(TreeNode* root) {
        
        if (root==NULL)
           return v;
        inorderTraversal(root->left);
        v.push_back(root->val);
        inorderTraversal(root->right);
        return v;
        
    }
};

100. Same Tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if (p==NULL&&q==NULL)
        return true;
        if (p==NULL||q==NULL)
            return false;
        if (p->val!=q->val)
            return false;
        return (isSameTree(p->left,q->left)&&isSameTree(p->right,q->right));    
        
    }
};

101. Symmetric Tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (root==NULL)
            return true;
        else
            return sym (root->left,root->right);
    }
    bool sym(TreeNode* p,TreeNode* q)
    {
        if(p==NULL or q==NULL)
            return p==q;
        if (p->val!=q->val)
            return false;
        return (sym (p->left,q->right)&&
        sym (p->right,q->left));
        
        
    }
};

104. Maximum Depth of Binary Tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
   
    int maxDepth(TreeNode* root) {
        if (root==NULL)
            return 0;
        int a=root->left?maxDepth(root->left):0;
        int b=root->right?maxDepth(root->right):0;
        
       return max(a,b)+1; 
    }
};

108. Convert Sorted Array to Binary Search Tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

TreeNode* Build_the_tree(vector<int>& arr, int l, int r)
{
    if(l>r)
    {
        return NULL;
    }
        
    int m=(l+r)/2;
    
    TreeNode* term=new TreeNode(arr[m]);
    
    term->left=Build_the_tree(arr, l, m-1);
    term->right=Build_the_tree(arr, m+1, r);
    
    return term;
}

TreeNode* sortedArrayToBST(vector<int>& nums) {
    return Build_the_tree(nums, 0, nums.size()-1);
}
};

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::I M P:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
110. Balanced Binary Tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
bool res = true;
bool isBalanced(TreeNode* root) {
if(root)traverse(root);
return res;
}

int traverse(TreeNode* root){
    //if root->left exist then traverse(root->left) else 0
    int a = root->left ? traverse(root->left) : 0;
    int b = root->right ? traverse(root->right) : 0;
    if((a-b) > 1 || (a-b) < -1) res = false;
    //ading 1 as initial root node is aldo to be added for depth
    return max(a, b) + 1;
}
    
};

118. Pascal's Triangle

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector <vector<int>>v(numRows);
        for (int i=0;i<numRows;i++)
        {
            v[i].resize(i+1);
            for (int j=0;j<=i;j++)
            {
                if (j==0||j==i)
                { v[i][j]=1;}
                else
                { v[i][j]=v[i-1][j]+v[i-1][j-1];}
            }
        }
        return v;
    }
};

121. Best Time to Buy and Sell Stock

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int maxProf = 0;
        int minPrice = INT_MAX;
        
        for(int i = 0; i<prices.size(); i++)
        {
            minPrice = min(minPrice,prices[i]);
            maxProf = max(maxProf, prices[i] - minPrice);
        }
        
        return maxProf;
    }
};

125. Valid Palindrome
////////////////////////////////////////////////NICE/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    bool isPalindrome(string s) {
        //traversing the string to remove spaces and comma
    for (int i = 0; i < s.length(); i++)
    {
          if((s[i]>='a' && s[i]<='z')||(s[i]>='0' &&s[i]<='9'))
        {
            continue;
        }
        else if (s[i]>='A' && s[i]<='Z') 
        {
            s[i]=tolower(s[i]);
        }
        else
        {
            s.erase(s.begin() + i);
            i--;
        }
    }
        cout<<s;
         for (int i = 0; i < s.length()/2; i++)
         {
             if (s[i]!=s[s.length()-i-1])
                 return false;
         }
        return true;
        
    }
};

141. Linked List Cycle.................................I M P..........................................................................................................

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode *fast =head;
        ListNode *slow =head;
        while (fast!=NULL && fast->next!=NULL)
        {
            fast=fast->next->next;
            slow=slow->next;
            
            if (fast == slow )
            return true;
        
        }
        
        return false;
      
    }
};

155. Min Stack



 171. Excel Sheet Column Number...........................I M P........................................................................................................
 
 class Solution {
public:
     int titleToNumber(string columnTitle) {
        long int result = 0;
        for (auto alpha : columnTitle)
        //logic build imp ............................................................................................................................................
            result = result * 26 + alpha - 64;
        return result;
    }
};


 
190. Reverse Bits
 
 
 
191. Number of 1 Bits....................................I M P.......................................................................................................
 
 class Solution {
public:
    int hammingWeight(uint32_t n) {
      int cnt=0;
    while(n>0)
    {
        if (n%2!=0)
        { cnt++;}
        
            n=n/2;
    }
    return cnt;
    }
};
 
 202. Happy Number...........................I M P..................................................................................................................
 
 class Solution {
public:
    bool isHappy(int n) {
    //condition imp ................................................................................................................................................
        if(n <= 10){
    if(n==1 | n == 7 | n == 10){
        return true;
    }
    else{ return false;}
}
        
        int sum=0;
       while (n!=0)
       {
            
            int k=n%10;
            sum=sum+k*k;
            n=n/10;
       }
        return (isHappy(sum));
    }
};
 
 206. Reverse Linked List................................I M P.........................................................................................................
 
 /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        
        ListNode *p=head;
        stack<int>s;
        if(head == NULL) return head;
        while (p!=nullptr)
        {
            s.push(p->val);
            p=p->next;
        }
        p=head;
        while (p!=NULL)
        {
            p->val=s.top();
            s.pop();
            p=p->next;
        }
        return head;
    }
};
 
 217. Contains Duplicate
 
 ............................................ERROR TIME LIMIT EXCEED HOGA for bada vector........................................................................................
 class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        for (int i=0;i<nums.size();i++)
        {
            for (int j=i+1;j<nums.size();j++)
            {
                 if (nums[i]==nums[j])
                     return true;
            }
           
        }
        return false;
        
    }
};
 
 ............................................................................RIGHT CODE ..............................................................................
 
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        
        for(int i=0;i<nums.size()-1;i++)
        {
            if(nums[i]==nums[i+1])
                return true;
        }
        return false;
    }
};

 234. Palindrome Linked List
 
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        stack<int>s;
        if (head==NULL ||head->next==NULL)
            return true;
        ListNode* p=head;
        ListNode* q=head;
        while (p!=NULL)
        {
            s.push(p->val);
            p=p->next;
        }
        while (!s.empty())
        {if (s.top()==q->val)
        {
            q=q->next;
            s.pop();
        }
         else
         {
             return false;
         }
        
        }
        return true;
    }
};

237. Delete Node in a Linked List

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void deleteNode(ListNode* node) {
        ListNode *p;
        while (node->next!=NULL)
        {
            p=node;
            node->val=node->next->val;
            node=node->next;
        }
        //if p not declared and node =nullptr done ,not giving right ans .................I M P ....................................................................
        p->next=nullptr;
        
    }
};

242. Valid Anagram

class Solution {
public:
    bool isAnagram(string s, string t) {
        int s_n=s.length();
        int t_n=t.length();
        sort(s.begin(), s.end());
        sort(t.begin(), t.end());
        if (s_n!=t_n)
            return false;
        int i=0,j=0;
        while (i<s_n&&j<t_n)
        {
            if (s[i]==t[j])
            {
                i++;
                j++;
            }
            else
                return false;
        }
        return true;
    }
};

268. Missing Number

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        if (nums[n-1]!=n)
            return n;
        for (int i=0;i<n;i++)
        {
            if (nums[i]!=i)
            return i;
        }
        return -1;
    }
};

283. Move Zeroes...............................I M P..................................................................................................................

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int k=0;
        int n=nums.size();
         for(int i=0;i<n;i++)
        {
             if (nums[i]!=0)
                {
                 nums[k]=nums[i];
                 k++;
                }
        }
        while (k<n)
        {
            nums[k]=0;
            k++;
        }
    }
};

326. Power of Three

class Solution {
public:
    bool isPowerOfThree(int n) {
    //base condition imp .............................................................................................................................................
        if(n < 1)             return false;
    
    if(n == 1)            return true;
    
    if(n % 3 != 0)        return false;

    return isPowerOfThree(n/3);
}
};

344. Reverse String

class Solution {
public:
    void reverseString(vector<char>& s) {
        for (int i=0;i<s.size()/2;i++)
        {
            char a=s[i];
            s[i]=s[s.size()-i-1];
            s[s.size()-i-1]=a;
        }
        for (int i=0;i<s.size();i++)
        {
            cout<<s[i];
        }
    }
};

350. Intersection of Two Arrays II..............................imp...................................................................................................

class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        vector<int> ans;
        int i=0,j=0;
        while(i<nums1.size()&&j<nums2.size())
        {
            if (nums1[i]<nums2[j])
                i++;
            else if (nums1[i]>nums2[j])
                j++;
            else
            {
                ans.push_back(nums1[i]);
                i++;
                j++;
            }
        }
        
        return ans;
    }
};

387. First Unique Character in a String
...........................................................I M P .....................................................................................................
class Solution {
public:
    int firstUniqChar(string s) {
        if (s.size()==1)
            return 0;
        int i=0;
         for (int j=0;j<s.size();j++)
            {
                if (i!=j && s[i]==s[j])
                {
                  
                       i++;
                       j=-1;
                    
                }
               else if (j==s.size()-1)
                 return i;
               else if (i>=s.size())
                   return -1;
            }
     
            return -1;
                    
        
        
     }
};

412. Fizz Buzz

class Solution {
public:
    vector<string> fizzBuzz(int n) {
        vector<string>v;
        for (int i=1;i<=n;i++)
        {
            if (i%3==0 && i%5==0)
                v.push_back("FizzBuzz");
            else if (i%3==0)
                v.push_back("Fizz");
            else if (i%5==0)
                v.push_back("Buzz");
            else 
                //imp to_string(i)....................................................................................................................................
                v.push_back(to_string(i));
        }
        return v;
        
    }
};








