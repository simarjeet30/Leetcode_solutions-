179. Largest Number
///////////////////////////////////////////////imp////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool comp(string s1,string s2)
{
    return s1+s2>s2+s1;
}
class Solution {
public:
    string largestNumber(vector<int>& nums) 
    {
         vector<string>res;
         for(int i=0;i<nums.size();i++)
         {res.push_back(to_string(nums[i]));}
         sort(res.begin(),res.end(),comp);
         string ans="";
         for(int i=0;i<res.size();i++)
         {  ans=ans+res[i];}
        if(ans[0]=='0')
        {  return "0";}
        return ans;
    }
};

172. Factorial Trailing Zeroes
///////////////////////////imp///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    int trailingZeroes(int n) {
        int y=5;
        int f =0;
        while(y<=n)
        {
            int z = n/y;
            f+=z;
            y*=5;
        }
        return f;
    }
};

797. All Paths From Source to Target

//time complexity :graph.size()
class Solution {
public:
    void traverse (vector<vector <int>>&graph,int start ,vector<vector <int>> &res,vector <int>&v)
{
    if (start==graph.size()-1)
    {
        v.push_back(start);
        res.push_back(v);
        v.pop_back();
        return;
    }
    v.push_back(start);
    for (int i=0;i<graph[start].size();i++)
    {
        traverse(graph,graph[start][i],res,v);
    }
    v.pop_back();
}
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<vector <int>>res;
        vector<int> v;
        traverse(graph,0,res,v);
        return res;
    }
};

807. Max Increase to Keep City Skyline

///////////////////////////////////////////////////////////IMP LOGIC///////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    int maxIncreaseKeepingSkyline(vector<vector<int>>& grid) {
vector<int >row,column;
int max=-1,sum=0;
for(int j=0;j<grid.size();j++){
for(int i=0;i<grid.size();i++){
if(grid[j][i]>max) max=grid[j][i];
}
row.push_back(max);
max=-1;
}
        for (int i=0;i<row.size();i++)
        {
            cout<<row[i];
        }
for(int j=0;j<grid.size();j++){
for(int i=0;i<grid.size();i++){
if(grid[i][j]>max) max=grid[i][j];
}
column.push_back(max);
max=-1;
}
        for (int i=0;i<row.size();i++)
        {
            cout<<column[i];
        }
int minm;
for(int i=0;i<grid.size();i++){
for(int j=0;j<grid[i].size();j++){
minm=min(row[i],column[j]);
    
sum+=abs(grid[i][j]-minm);
    cout<<"\nsum"<<sum;
}
}
return sum;
}
};

1282. Group the People Given the Group Size They Belong To

class Solution {
public:
    //map use kiya ek me daalte jao and agar size same ho jaaye to usse 2d vector me push krdo
    vector<vector<int>> groupThePeople(vector<int>& groupSizes) {
        vector<vector<int>>c;
        unordered_map<int,vector<int>>map;
        for (int i=0;i<groupSizes.size();i++)
        {
            //0 1:5 2 3:0,1,2,3,4,6
            map[groupSizes[i]].push_back(i);
            if (map[groupSizes[i]].size()==groupSizes[i])
            {
                //0 1:5 2 3:0,1,2 stop
                c.push_back(map[groupSizes[i]]);
                map[groupSizes[i]]={};
            }
            
                    
        }
        return c;
    }
};

1302. Deepest Leaves Sum

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    //first calculate height of tree 
int height (TreeNode* root)
{
    if (!root)
        return 0 ;
    return 1+max(height(root->left),height(root->right));
}
//then dfs to get sum of all h height nodes
int s=0;
    
void dfs(TreeNode* root,int cur,int height)
{
    if (!root)
        return ;
    if (!root->left and !root->right and cur==height)//node is leaf node, curr == height becoz we dont want all leaf node but just the last level leaf nodes
    {
        s+=root->val;
    }
    dfs(root->left,cur+1,height);
    dfs(root->right,cur+1,height);
}
    
    int deepestLeavesSum(TreeNode* root) {
        int ht=height(root);
        dfs(root,1,ht);
        return s;
    }
};

1689. Partitioning Into Minimum Number Of Deci-Binary Numbers

class Solution {
public:
    int minPartitions(string n) {
        int max1 = 0;
        for(auto i:n){
            //i-'0' is char to int
            max1 = max (max1, i-'0');
        }
        return max1;
    }
};

1769. Minimum Number of Operations to Move All Balls to Each Box

class Solution {
public:
    vector<int> minOperations(string boxes) {
        vector <int >ans ;
        vector <int>index;
        for (int i=0;i<boxes.size();i++)
        {
            if (boxes[i]=='1')
                index.push_back(i);
        }
        
        for (int i=0;i<boxes.size();i++)
        {
            int sum=0;
            for (int j=0;j<index.size();j++)
            {
                sum+=abs(index[j]-i);
            }
            ans.push_back(sum);
        }
        return ans;
    }
};

2181. Merge Nodes in Between Zeros

/** 
* Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeNodes(ListNode* head) {
        ListNode *t2=head->next;
        int sm = 0;
        while(t2->val!=0){
            sm += t2->val;
            t2 = t2->next;
        }
        ListNode *temp = new ListNode(sm);
        if(t2->next==NULL){
            return temp;
        }
        else{
            temp->next = mergeNodes(t2);
        }
        return temp;
    }
};

2265. Count Nodes Equal to Average of Subtree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sum (TreeNode* root)
    {
        if (root==NULL)
        {
            return 0;
        }
        return (root->val+sum(root->left)+sum(root->right));
    }
    int count (TreeNode* root)
    {
        if (root==NULL)
        {
            return 0;
        }
        return (1+count(root->left)+count(root->right));
    }
    int averageOfSubtree(TreeNode* root) {
    
        if (root==NULL)
        {
            return 0;
        }
        if (sum(root)/count(root)==root->val)
        {
            return (1+averageOfSubtree(root->left)+averageOfSubtree(root->right));
        }
        return (averageOfSubtree(root->left)+averageOfSubtree(root->right));
        
    }
};



