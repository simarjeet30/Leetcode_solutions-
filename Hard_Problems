179. Largest Number
///////////////////////////////////////////////imp////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool comp(string s1,string s2)
{
    return s1+s2>s2+s1;
}
class Solution {
public:
    string largestNumber(vector<int>& nums) 
    {
         vector<string>res;
         for(int i=0;i<nums.size();i++)
         {res.push_back(to_string(nums[i]));}
         sort(res.begin(),res.end(),comp);
         string ans="";
         for(int i=0;i<res.size();i++)
         {  ans=ans+res[i];}
        if(ans[0]=='0')
        {  return "0";}
        return ans;
    }
};

172. Factorial Trailing Zeroes
///////////////////////////imp///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    int trailingZeroes(int n) {
        int y=5;
        int f =0;
        while(y<=n)
        {
            int z = n/y;
            f+=z;
            y*=5;
        }
        return f;
    }
};

797. All Paths From Source to Target

//time complexity :graph.size()
class Solution {
public:
    void traverse (vector<vector <int>>&graph,int start ,vector<vector <int>> &res,vector <int>&v)
{
    if (start==graph.size()-1)
    {
        v.push_back(start);
        res.push_back(v);
        v.pop_back();
        return;
    }
    v.push_back(start);
    for (int i=0;i<graph[start].size();i++)
    {
        traverse(graph,graph[start][i],res,v);
    }
    v.pop_back();
}
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<vector <int>>res;
        vector<int> v;
        traverse(graph,0,res,v);
        return res;
    }
};

1302. Deepest Leaves Sum

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    //first calculate height of tree 
int height (TreeNode* root)
{
    if (!root)
        return 0 ;
    return 1+max(height(root->left),height(root->right));
}
//then dfs to get sum of all h height nodes
int s=0;
    
void dfs(TreeNode* root,int cur,int height)
{
    if (!root)
        return ;
    if (!root->left and !root->right and cur==height)//node is leaf node, curr == height becoz we dont want all leaf node but just the last level leaf nodes
    {
        s+=root->val;
    }
    dfs(root->left,cur+1,height);
    dfs(root->right,cur+1,height);
}
    
    int deepestLeavesSum(TreeNode* root) {
        int ht=height(root);
        dfs(root,1,ht);
        return s;
    }
};

1689. Partitioning Into Minimum Number Of Deci-Binary Numbers

class Solution {
public:
    int minPartitions(string n) {
        int max1 = 0;
        for(auto i:n){
            //i-'0' is char to int
            max1 = max (max1, i-'0');
        }
        return max1;
    }
};
